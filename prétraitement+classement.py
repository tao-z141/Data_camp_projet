# -*- coding: utf-8 -*-
"""prétraitement+classement.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rtEfukCI65m3i1NJM5pMlaX8NXz9KkbP
"""

import pandas as pd
import numpy as np
from google.colab import files
import re

pip install unidecode

from unidecode import unidecode

pip install optimum

pip install onnxruntime

!pip install optimum onnxruntime onnx

uploaded = files.upload()
df = pd.read_csv('Article_data.csv')

df.head()

df['Auteur'] = df['Auteur'].str.split('|').str[0].str.strip()

df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

df['Date'] = df['Date'].apply(lambda x: x.strftime('%Y-%m-%d') if pd.notna(x) else '')

df['Note'] = df['Note'].str.extract(r'(\d+)').astype(int)

def nettoyer_texte(texte):

    texte = unidecode(texte)
    texte = re.sub(r'[^a-zA-Z\s]', '', texte)
    texte = re.sub(r'\s+', ' ', texte).strip()
    texte = texte.lower()
    return texte

df['Commentaire'] = df['Commentaire'].apply(nettoyer_texte)

print(df.isnull().sum())

df = df.drop_duplicates()

df.head(30)

df.to_csv('data_pretraité.csv', index=False, encoding='utf-8')

!pip install cupy-cuda11x

from optimum.onnxruntime import ORTModelForSequenceClassification
from transformers import CamembertTokenizer, pipeline

HUB_MODEL = "cmarkea/distilcamembert-base-sentiment"

"""# Nouvelle section

# Nouvelle section
"""

tokenizer = CamembertTokenizer.from_pretrained(HUB_MODEL)
quantized_model = ORTModelForSequenceClassification.from_pretrained(HUB_MODEL, file_name="model.onnx")
onnx_qa_quantized = pipeline("text-classification", model=quantized_model, tokenizer=tokenizer)

df['prediction'] = df['Commentaire'].apply(lambda x: onnx_qa_quantized(x)[0]['label'])
df['score'] = df['Commentaire'].apply(lambda x: onnx_qa_quantized(x)[0]['score'])



df.head(50)

star_mapping = {
    "1 star": "très négatif",
    "2 stars": "négatif",
    "3 stars": "neutre",
    "4 stars": "positif",
    "5 stars": "très positif"
}

df['sentiment'] = df['prediction'].map(star_mapping)

df.head(50)

df.to_csv('prediction.csv', index=False, encoding='utf-8')